syntax = "proto3";

package transport_package;

message Rgb {
  uint32 red = 1;
  uint32 green = 2;
  uint32 blue = 3;
};

message Rgba {
  Rgb rgb = 1;
  double opacity = 2;
};

message Color {
  oneof str_rgb_rgba {
    string str_color = 1;
    Rgb rgb = 2;
    Rgba rgba = 3;
  }
};

message RenderSettings {
  double width = 1;
  double height = 2;
  double padding = 3;
  double line_width = 4;
  double stop_radius = 5;
  uint32 bus_label_font_size = 6;
  repeated double bus_label_offset = 7;
  uint32 stop_label_font_size = 8;
  repeated double stop_label_offset = 9;
  Color underlayer_color = 10;
  double underlayer_width = 11;
  repeated Color color_palette = 12;
};

message RoutingSettings {
  double bus_wait_time = 1;
  double bus_velocity = 2;
};

message SerializerSettings {
  string file = 1;
};

message Coordinates {
  double lat = 1;
  double lng = 2;
};

message Distance_to_stop {
  string stop_name = 1;
  uint32 distance = 2;
};

message BusStop {
  string name = 1;
  Coordinates coordinates = 2;
  repeated Distance_to_stop distances = 3;
};

message BusRoute {
  string name = 1;
  repeated string stops = 2;
  bool is_roundtrip = 3;
};

message TransportCatalogue {
  repeated BusStop stops = 1;
  repeated BusRoute routes = 2;
};

message Edge {
  uint32 from = 1;
  uint32 to = 2;
  double weight = 3;
};

message IncidenceList {
  repeated uint32 edge_id = 1;
}

message Graph {
  repeated Edge edges = 1;
  repeated IncidenceList incidence_lists = 2;
};

message RouteInternalData {
  bool nullopt = 1; //optional<RouteInternalData>
  double weight = 2;
  bool prev_edge_set = 3; //optional prev_edge
  uint32 prev_edge = 4;
};

message RouteInternalData_vector {
  repeated RouteInternalData route_internal_data_vector = 1;
};

message RoutesInternalData {
  repeated RouteInternalData_vector routes_internal_data = 1;
};

message Router {
  RoutesInternalData routes_internal_data = 1;
};

message StopToVertex{
  string name = 1;
  uint32 vertex_id = 2;
};

message RouteEdgeInfo {
  string stop_name = 1;
  string bus = 2;
  uint32 span_count = 3;
  double time = 4;
  bool type = 5; //Wait = 0, Bus = 1
};

message EdgeToRouteSegment {
  uint32 edge_id = 1;
  RouteEdgeInfo route_edge_info = 2;
};

message Route_manager {
  repeated StopToVertex stop_to_vertex = 1;
  repeated EdgeToRouteSegment edge_to_route_segment = 2;
  Graph graph = 3;
  Router router = 4;
};

message TransportPackage {
  TransportCatalogue catalogue = 1;
  RenderSettings render_settings = 2;
  RoutingSettings routing_settings = 3;
  Route_manager route_manager = 4;
};